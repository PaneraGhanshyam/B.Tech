1. Combine information from student and result table using cross join or Cartesian product.
db.STUDENT.aggregate([
	
	{
		$lookup:{
			from:'RESULT',
			localField:'Rno',
			foreignField:'Rno',
			as:'Result'
			
		}
	}
	
])
db.STUDENT.aggregate([
    {
        $lookup: {
            from: 'RESULT',
            pipeline: [
                { $match: {} } // Match all documents in RESULT
            ],
            as: 'Result'
        }
    },
    {
        $unwind: '$Result' // Flatten the Result array
    },
    {
        $project: {
            _id: 0,            // Exclude the default _id field
            Rno: 1,            // Include Rno from STUDENT
            Name: 1,           // Include Name from STUDENT
            Branch: 1,         // Include Branch from STUDENT
            SPI: '$Result.SPI' // Include SPI from RESULT
        }
    }
]);


2. Display Rno, Name, Branch and SPI of all students.
db.STUDENT.aggregate([
	
	{
		$lookup:{
			from:'RESULT',
			localField:'Rno',
			foreignField:'Rno',
			as:'Result'
		}
	},
	{
		$unwind:'$Result'
	},
	{
		$project:{
			Rno:1,
			Name:1,
			Branch:1,
			SPI:'$Result.SPI'
		}
	}
	

])
3. Display Rno, Name, Branch and SPI of CE branch’s student only.
db.STUDENT.aggregate([

	{
		$match:{
			Branch:'CE'
		}
	},
	{
		$lookup:{
			from:'RESULT',
			localField:'Rno',
			foreignField:'Rno',
			as:'Result'
		}
	},
	{
		$unwind:'$Result'
	},
	{
		$project:{
			Rno:1,
			Name:1,
			Branch:1,
			SPI:'$Result.SPI'
		}
	}
	

])
4. Display Rno, Name, Branch and SPI of other than EC branch’s student only.
db.STUDENT.aggregate([

	{
		$match:{
			Branch:{$ne:'EC'}
		}
	},
	{
		$lookup:{
			from:'RESULT',
			localField:'Rno',
			foreignField:'Rno',
			as:'Result'
		}
	},
	{
		$unwind:'$Result'
	},
	{
		$project:{
			Rno:1,
			Name:1,
			Branch:1,
			SPI:'$Result.SPI'
		}
	}
	

])
5. Display average result of each branch.
db.STUDENT.aggregate([
	{
		$lookup:{
			from:'RESULT',
			localField:'Rno',
			foreignField:'Rno',
			as:'Result'
		}
	},
	{
		$unwind:'$Result'
	},
	{
		$group:{
			_id:'$Branch',
			avg:{$avg:'$Result.SPI'}
		}
	},
	{
		$project:{
			Branch:1,
			avg:1
		}
	}
	

])

6. Display average result of each branch and sort them in ascending order by SPI.
db.STUDENT.aggregate([
	{
		$lookup:{
			from:'RESULT',
			localField:'Rno',
			foreignField:'Rno',
			as:'Result'
		}
	},
	{
		$unwind:'$Result'
	},
	{
		$group:{
			_id:'$Branch',
			avg:{$avg:'$Result.SPI'}
		}
	},
	{
		$project:{
			Branch:'$_id',
			avg:1
		}
	},
	{
		$sort:{
			avg:1
		}
	}
	

])
7. Display average result of CE and ME branch.
db.STUDENT.aggregate([
	{
		$match:{
			Branch:{$in:['CE','ME']}
		}
	},
	{
		$lookup:{
			from:'RESULT',
			localField:'Rno',
			foreignField:'Rno',
			as:'Result'
		}
	},
	{
		$unwind:'$Result'
	},
	{
		$group:{
			_id:'$Branch',
			avg:{$avg:'$Result.SPI'}
		}
	},
	{
		$project:{
			Branch:'$_id',
			avg:1
			
		}
	},
	{
		$sort:{
			avg:1
		}
	}
	

])

8. Perform the left outer join on Student and Result tables.
db.STUDENT.aggregate([
    {
        $lookup: {
            from: 'RESULT', // The collection to join
            localField: 'Rno', // Field from the STUDENT collection
            foreignField: 'Rno', // Field from the RESULT collection
            as: 'Result' // Output array field for joined documents
        }
    },
    {
        $project: {
            Rno: 1,         // Include Rno from STUDENT
            Name: 1,       // Include other relevant fields from STUDENT
            Branch: 1,
            Result: 1      // Include the joined Result array
        }
    }
]);

9. Perform the right outer join on Student and Result tables.
db.RESULT.aggregate([
    {
        $lookup: {
            from: 'STUDENT', // The collection to join
            localField: 'Rno', // Field from the RESULT collection
            foreignField: 'Rno', // Field from the STUDENT collection
            as: 'Student' // Output array field for joined documents
        }
    },
    {
        $project: {
            Rno: 1,             // Include Rno from RESULT
            SPI: 1,             // Include other relevant fields from RESULT
            Student: {          // Include Student details
                $arrayElemAt: ['$Student', 0] // Get the first matching student
            }
        }
    }
]);

10. Perform the full outer join on Student and Result tables. 


11. Retrieve the names of employee along with their manager name from the Employee table.
db.EMPLOYEE.aggregate([
    {
        $lookup: {
            from: 'EMPLOYEE', // Joining with the same collection
            localField: 'ManagerNo', // Employee's manager field
            foreignField: 'EmployeeNo', // Manager's employee number
            as: 'manager' // Output field for manager documents
        }
    },
    {
        $unwind: { 
            path: '$manager', // Unwind the manager array
            preserveNullAndEmptyArrays: true // Keep employees without managers
        }
    },
    {
        $project: {
            employeeName: '$Name', // Employee's name
            managerName: '$manager.Name' // Manager's name
        }
    }
]);









